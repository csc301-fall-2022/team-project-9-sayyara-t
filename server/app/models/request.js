'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  /**
   * Model for Request
   * 
   * This model acts as a Request a vehicle owner sends a shop owner concerning a service they want done on a vehicle.
   * This model links a User, Shop, Vehicle, Quote, and a Request model together.
   */
  class Request extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
    }
  }
  Request.init({
    /** 
     * The ID of the model isntance. The ID is autogenerated when a new model is created and is default UUID
     * @var UUID
     */
    id: {
      type:DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
      unique: true 
    },
    /**
     * The ID of the User model tied to this Request, represents the User creating the request
     * @var UUID
     */
    user_id: {
      type: DataTypes.UUID, 
      allowNull: false,
      references:{
        model: 'User',  
        key: 'id'
      }
    },
    /**
     * The ID of the Shop model tied to this Request, represents the Shop recieveing the request
     * @var UUID
     */
    shop_id: {
      type: DataTypes.UUID, 
      allowNull: false,
      references:{
        model: 'Shop',
        key: 'id'
      }
    },
    /**
     * The ID of the Vehicle model tied to this Request, represents the Vehicle that requires a service
     * @var UUID
     */
    vehicle_id: {
      type: DataTypes.UUID, 
      allowNull: false,
      references:{
        model: 'Vehicle',
        key: 'id'
      }
    },
    /** 
     * The ID of the Quote model tied to this Request, represents a Shop's quote concerning this request
     * @var UUID
     */
    quote_id: {
      type: DataTypes.UUID, 
      allowNull: true,
      references:{
        model: 'Quote',
        key: 'id'
      }
    },
    /**
     * The ID of the Request model tied to this Request, represents a previous request that may be tied to this request
     * @var UUID
     */
    linked_request_id: {
      type: DataTypes.UUID, 
      allowNull: true,
      references:{
        model: 'Request',
        key: 'id'
      }
    },
    /**
     * The services that the user desires to be done on their vehicle 
     * @var JSON
     */
    services: {
      type: DataTypes.JSON, 
      allowNull: false
    },
    /**
     * The state of the request, represented as an integer which is tied to a string value in a dict
     * @var INTEGER
     */
    state: {
      type: DataTypes.INTEGER, 
      defaultValue: 0
    },
    /**
     * The description of the issue the user's vehicle is facing
     * @var STRING
     */
    description: {
      type:DataTypes.STRING, 
      allowNull: false
    },
    /**
     * Describes whether or not the user wants new or used parts, represented as an integer which is tied to a string value in a dict
     * @var INTEGER
     */
    new_used: {
      type: DataTypes.INTEGER, 
      allowNull:false, 
      defaultValue: 3
    },
    /**
     * Describes whether or not the user wants OEM parts or not for their vehicle, 
     * represented as an integer which is tied to a string value in a dict
     * @var INTEGER
     */
    oem_after: {
      type: DataTypes.INTEGER, 
      allowNull:false, 
      defaultValue: 3
    }
  }, {
    sequelize,
    modelName: 'Request',
  });
  return Request;
};